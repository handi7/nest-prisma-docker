// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String   @map("password") // Prisma gak ada select: false, handle di service layer
  roleId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  users       User[]
  permissions RolePermission[] // relasi ke join table

  deletedAt   DateTime?        @map("deleted_at")

  @@map("roles")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        PermissionsEnum  @unique
  category    PermissionCategory
  label       String
  roles       RolePermission[] // relasi ke join table

  deletedAt   DateTime?        @map("deleted_at")

  @@map("permissions")
}

model RolePermission {
  roleId       Int
  permissionId Int

  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

// ENUMS
enum PermissionsEnum {
  view_user
  edit_user
  delete_user
  create_user

  view_role
  edit_role
  delete_role
  create_role

  view_permission
}

enum PermissionCategory {
  user
  role
  permission
}